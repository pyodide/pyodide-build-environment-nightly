name: Release Cross-build environment

on:
  schedule:
    # Run at 00:00 UTC on the 1st, 10th, and 20th of every month
    - cron: "0 0 1,10,20 * *"
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch to build"
        default: "main"
        required: false
      release_version:
        description: "The version to release"
        required: true

permissions: {}

concurrency:
  group: release-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Pyodide cross-build environment
    permissions:
      contents: read
    uses: ./.github/workflows/build-xbuildenv.yml
    with:
      branch: ${{ github.event.inputs.branch || 'main' }}

  publish:
    name: Publish cross-build environments
    runs-on: ubuntu-latest
    needs: [build]
    if: >-
      github.repository == 'pyodide/pyodide-build-environment-nightly'
    permissions:
      id-token: write # Required to sign the attestations
      attestations: write # Required to sign the attestations
      contents: write # Required to upload to a GitHub release identifier
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: cross-build-env
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: cross-build-env-debug
          path: dist
          merge-multiple: true

      - name: Generate attestations
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: |
            dist/xbuildenv.tar.bz2
            dist/xbuildenv-debug.tar.bz2

      - name: Calc release version
        id: release_version
        shell: bash
        run: |
          if [[ $GITHUB_EVENT_NAME == 'schedule' ]]; then
            echo "release_version=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          else
            echo "release_version=${GITHUB_EVENT_INPUTS_RELEASE_VERSION}" >> $GITHUB_OUTPUT
          fi

          cat $GITHUB_OUTPUT
        env:
          GITHUB_EVENT_INPUTS_RELEASE_VERSION: ${{ github.event.inputs.release_version }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}

      - name: Verify them, to ensure that the wheels they were attested correctly
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        shell: bash
        run: |
          gh attestation verify dist/xbuildenv.tar.bz2 --repo $GITHUB_REPOSITORY
          gh attestation verify dist/xbuildenv-debug.tar.bz2 --repo $GITHUB_REPOSITORY

      - name: Create and push tag
        run: |
          git config --global user.name "Pyodide CI"
          git config --global user.email "actions@github.com"
          TAG_NAME=${STEPS_RELEASE_VERSION_OUTPUTS_RELEASE_VERSION}
          git tag $TAG_NAME
          git push origin $TAG_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          STEPS_RELEASE_VERSION_OUTPUTS_RELEASE_VERSION: ${{ steps.release_version.outputs.release_version }}

      - name: Create GitHub release with these wheels
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          files: |
            dist/*.tar.bz2
          tag_name: ${{ steps.release_version.outputs.release_version }}
          fail_on_unmatched_files: true
          name: ${{ steps.release_version.outputs.release_version }}
